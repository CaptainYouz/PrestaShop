#!/bin/sh
# Full path of git directory
_DIR=$(git rev-parse --show-toplevel)

# BO Default theme variables
_BO_DEFAULT_THEME="admin-dev/themes/default"
_BO_DEFAULT_THEME_PACKAGE=$_BO_DEFAULT_THEME"/package.json"
_BO_DEFAULT_THEME_ASSETS=$_DIR"/admin-dev/themes/default/public"

# BO New theme variables
_BO_NEW_THEME="admin-dev/themes/new-theme"
_BO_NEW_THEME_PACKAGE=$_BO_NEW_THEME"/package.json"
_BO_NEW_THEME_ASSETS=$_DIR"/admin-dev/themes/new-theme/public"

# FOP Classic theme variables
_FO_CLASSIC_THEME="themes/classic/_dev"
_FO_CLASSIC_THEME_PACKAGE=$_FO_CLASSIC_THEME"/package.json"
_FO_CLASSIC_THEME_ASSETS=$_DIR"/themes/classic/assets"

# Command to check which files changed since the last pull
# Inspired by https://gist.github.com/sindresorhus/7996717
_GIT_CHANGES="$(git diff-tree -r --name-only --no-commit-id ORIG_HEAD HEAD)"

# Colors variables
end="\033[0m"
bold="\033[1m"
black='\033[0;30m'
red='\033[0;31m'
green='\033[0;32m'
yellow='\033[0;33m'
blue='\033[0;34m'
purple='\033[0;35m'
cyan='\033[0;36m'
white='\033[0;37m'

# Specials caracters
npm="${cyan}${bold}npm:${end}"
build="${cyan}${bold}build:${end}"
check="${green}${bold}\xE2\x9C\x94${end}"
info="${cyan}${bold}-${end}"
cross="${red}${bold}X${end}"
warning="${yellow}${bold}!${end}"

# HELPERS FUNCTIONS
log() {
  echo "$1$2$end"
}

printLine() {
  printf '%*s\n' "${COLUMNS:-$(tput cols)}" '' | tr ' ' -
}

# inspired by http://fitnr.com/showing-a-bash-spinner.html

spinner() {
  local pid=$1
  local delay=0.05
  local spinstr='|/-\'
  printf "${green}${bold}"
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    for i in `seq 0 4`
    do
      printf "${spinstr:$i:1}"
      printf "\010"
      sleep 0.05
    done
  done
  printf "${unformat}"
}

#
# function npmInstall()
# This function start the `npm install` command and log result in a logfile
#
# @Params:
#   $1: Name of the theme
#
npmInstall() {
  logFile="/tmp/${1}.npm.log"
  successMessage="${npm} ${check} 'npm install' command finished! Logs available in: $logFile"
  errorMessage="${red}${bold}npm: ${cross} ${red}${bold}Error on 'npm install' command! Logs available in: $logFile ${unformat}"

  log "${npm} ${info} Installing new modules, starting 'npm install'..."
  ( (npm install &> $logFile && log "$successMessage")  || log "$errorMessage") &
  spinner $!
}

#
# function packagesCheck()
# This function check if the node packages are correctly installed by checking:
#     1: if `node_modules` directory is present
#     2: if any changes has been made on package.json file
#   If any of those two conditions are true, it will run the `npm install` command to install the
#   different packages required for the build.
#
# @Params:
#   $1: Name of the theme. Required for the log file
#   $2: Package.json path. Required to check changes in package.json
#
packagesCheck() {
  if [ "$(echo $_GIT_CHANGES | grep $2)" ]; then
    log "${npm} ${warning} Changes found in: '$2'"
    npmInstall "$1"
  elif [ ! -d "node_modules/" ]; then
    log "${npm} ${warning} No node_modules directory found"
    npmInstall "$1"
  else
    log "${npm} ${info} No changes found in '$2' and 'node_modules/' directory already present."
    log "${npm} ${check} No packages to install here! We are good to go!"
  fi
}

#
# function buildAssets()
# This function simply run the theme build and display status messages
#
# @Params:
#   $1: Name of the theme
#
buildAssets() {
  logFile="/tmp/${1}.build.log"
  successMessage="${build} ${check} Building completed! Logs available in: $logFile"
  errorMessage="${red}${bold}build: ${cross} ${red}${bold}Error on 'npm run build' command! Logs available in: $logFile ${unformat}"

  echo "${build} ${info} Starting building of assets..."
  ( (npm run build &> $logFile && log "$successMessage")  || log "$errorMessage") &
  spinner $!
}

#
# function buildTheme()
# This function build the different themes of Prestashop.
#   It first check if the node packages are correctly installed with packagesCheck function, by checking:
#     1: if `node_modules` directory is present
#     2: if any changes has been made on package.json file
#   If any of those two conditions are true, it will run the `npm install` command to install the
#   different packages required for the build.
#
#   Then, the function check
#     1: if the assets directory is not present
#     2: if any changes has been made on the theme files
#   If any of those two conditions are true, it will run the `npm run build` command to
#   start the building of the theme assets.
#
# @Params:
#   $1: Name of the theme
#   $2: Directory of the theme
#   $3: Package.json path of the theme
#   $4: Assets directory path
buildTheme() {
  printLine
  log $purple$bold "$1"         # displays the name of the Theme
  cd $_DIR'/'$2               # goes to the theme directory

  packagesCheck "$1" "$3"     # checking of node modules

  if [ ! -d "$4" ]; then      # case: if no assets directory is present
    echo "${build} ${warning} No assets directory found!"
    buildAssets "$1"
  elif [ "$(echo $_GIT_CHANGES | grep $2)" ]; then # case: if some files inside the theme directory have changed since the last pull
    echo "${build} ${warning} Changes found in assets directory!"
    buildAssets "$1"
  else
    echo "${build} ${info} No changes found on $1."
    echo "${build} ${check} Nothing to build here!"
  fi
}


test() {
  sleep 3
}

## Start of the script
printLine
log $purple$bold "ASSETS BUILDING"
buildTheme "BO - Default Theme" $_BO_DEFAULT_THEME $_BO_DEFAULT_THEME_PACKAGE $_BO_DEFAULT_THEME_ASSETS
buildTheme "BO - New Theme" $_BO_NEW_THEME $_BO_NEW_THEME_PACKAGE $_BO_NEW_THEME_ASSETS
buildTheme "FO - Classic Theme" $_FO_CLASSIC_THEME $_FO_CLASSIC_THEME_PACKAGE $_FO_CLASSIC_THEME_ASSETS
printLine